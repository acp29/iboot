%  Function File: bootknife
%
%  Bootknife sampling  
%
%  bootstat = bootknife(nboot,bootfun,d)
%  bootstat = bootknife(nboot,bootfun,d1,...,dN)
%  bootstat = bootknife(...,'Weights',weights)
%
%  bootstat = bootknife(nboot,bootfun,d,...) draws nboot bootknife data
%  resamples and returns the statistic computed by bootfun in bootstat.
%  Bootknife sampling involves creating leave-one-out jackknife samples
%  of size n - 1 and then drawing bootstrap samples of size n with
%  replacement from the jackknife samples [1]. Unlike for the bootstrap, 
%  the variance of bootstat generated by bootknife sampling provides an 
%  unbiased estimate of the sampling variance for small samples. bootfun 
%  is a function handle (e.g. specified with @), or a string indicating 
%  the function name. The third input argument is data (column vector or 
%  a matrix), that is used to create inputs for bootfun. The resampling 
%  method used is balanced resampling [2]. This function is particularly
%  useful if the intention is to use bootstat to calculate a standard  
%  error for bootfun on the data, when the size of the dataset is small.
%
%  bootstat = bootknife(nboot,bootfun,d1,...,dN) is as above except that 
%  the third and subsequent numeric input arguments are data vectors 
%  that are used to create inputs for bootfun. 
%
%  bootstat = bootstrp(...,'Weights',weights) specifies observation
%  weights. weights must be a vector of non-negative numbers. The
%  length of weights must be equal to first dimension of the
%  non-scalar input argument(s) to bootfun. The weights are used as
%  bootstrap sampling probabilities. Balanced resampling is extended
%  to resampling with weights.
%
%  Bibliography:
%  [1] Hesterberg T.C. (2004) Unbiasing the Bootstrapâ€”Bootknife Sampling 
%        vs. Smoothing; Proceedings of the Section on Statistics & the 
%        Environment. Alexandria, VA: American Statistical Association.
%  [2] Davison et al. (1986) Efficient Bootstrap Simulation.
%        Biometrika, 73: 555-66
%
%  bootknife v1.0.1.0 (28/02/2022)
%  Author: Andrew Charles Penn
%  https://www.researchgate.net/profile/Andrew_Penn/
%
%  Copyright 2019 Andrew Charles Penn
%  This program is free software: you can redistribute it and/or modify
%  it under the terms of the GNU General Public License as published by
%  the Free Software Foundation, either version 3 of the License, or
%  (at your option) any later version.
%
%  This program is distributed in the hope that it will be useful,
%  but WITHOUT ANY WARRANTY; without even the implied warranty of
%  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%  GNU General Public License for more details.
%
%  You should have received a copy of the GNU General Public License
%  along with this program.  If not, see <http://www.gnu.org/licenses/>.


function bootstat = bootknife (nboot, bootfun, varargin)
  
  % Error checking
  if nargin < 3
    error('not enough input argumemnts')
  end

  % Set defaults
  weights = [];

  % Assign input arguments to function variables
  argin3 = varargin;
  narg = numel(argin3);
  if narg > 1
    while ischar(argin3{end-1})
      if strcmpi(argin3{end-1},'Weights')
        weights = argin3{end};
      else
        error('unrecognised input argument to bootstrp')
      end
      argin3 = {argin3{1:end-2}};
      narg = numel(argin3);
      if narg < 3
        break
      end
    end
  end
  x = argin3;


  % Determine properies of data
  nvar = numel(x);
  sz = size(x{1});
  n = sz(1);
  if sz(2) > 1
    matflag = 1;
  else
    matflag = 0;
  end 
  
  % Check name-value pairs for errors
  if isempty(weights)
    w = ones(n,1);
  else
    if size(weights,2)>1
      % Transpose row vector weights
      weights = weights.';
    end
    if ~all(size(weights) == [n,1])
      error('The weights vector is not the same dimensions as the data');
    end
    if any(weights<0)
      error('Weights must be a vector of non-negative numbers')
    end
    weights = weights / sum(weights);
    w = weights * n;
  end

  % Initialize
  B = nboot(1);
  N = n * B;
  bootstat = zeros(1, B);
  X = cell(1, nvar);
  idx = zeros(n, 1);
  c = w * B;

  % Perform balanced bootknife resampling
  % Octave or Matlab serial/vectorized computing
  %    Gleason, J.R. (1988) Algorithms for Balanced Bootstrap Simulations. 
  %    The American Statistician. Vol. 42, No. 4 pp. 263-266
  for h = 1:B
    r = h - fix((h-1)/n) * n;
    for i = 1:n
      d = c;   
      d(r) = 0;
      if ~sum(d)
        d = c;
      end
      j = sum((rand(1) >= cumsum(d./sum(d)))) + 1;
      idx(i, 1) = j;
      c(j) = c(j) - 1;
    end
    for v = 1:nvar
      X{v}(:,h) = x{v}(idx);
    end
    % Function evaluations performed in a Matlab loop
    if matflag || (nvar > 1)
      for v = 1:nvar
        X{v} = x{v}(idx);
      end
      bootstat(h) = feval(bootfun,X{:});
    else
      for v = 1:nvar
        X{v}(:,h) = x{v}(idx);
      end
    end
  end
  % Vectorized function evaluations on bootstrap data samples
  if ~matflag && (nvar == 1)
    bootstat = feval(bootfun,X{:});
  end
  
end
