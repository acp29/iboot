% Function file for generating bootstrap sample indices
%
% USAGE
% bootsam = boot (n, nboot)
% bootsam = boot (n, nboot, u)
% bootsam = boot (n, nboot, u, w)
%
% INPUT VARIABLES
% n (short integer, int16) is the number of rows (of the data vector)
% nboot (integer, int32) is the number of bootstrap resamples
% u (boolean) for unbiased: false (for bootstrap) or true (for bootknife)
% w (integer, int32) is a weight vector of length n. 
%
% OUTPUT VARIABLE
% bootsam (short integer, int16) is an n x nboot matrix of bootstrap resamples
%
% NOTES
% Uniform random numbers are generated by the Mersenne Twister 19937 generator.
% u is an optional input argument. The default is false. If u is true then 
% the sample index for omission in each bootknife resample is selected 
% systematically. If the remaining number of bootknife resamples is not 
% divisible by the sample size (n), then the sample index omitted is  
% selected randomly. 
% w is an optional input argument. The default is a vector of length n with
% each element equal to nboot (i.e. uniform weighting). Each element of w
% is the number of times that the corresponding index is represented in 
% bootsam. For example, if the second element is 500, then the value 2 will 
% will be assigned to 500 elements within bootsam. The sum of w should equal 
% n * nboot.
%
% Author: Andrew Charles Penn (2022)
%

function bootsam = boot (n, nboot, u, c)

  % Error checking
  if (n <= 0) || (n ~= fix(n)) || isinf(n) || isnan(n) || (max (size (n)) > 1)
    error ('n must be a finite positive integer')
  end
  if (n > 2^15-1)
    error ('n exceeds the maximum sample size, 2^15-1')
  end
  if (nboot <= 0) || (nboot ~= fix(nboot)) || isinf(nboot) || isnan(nboot) || (max (size (n)) > 1)
    error ('nboot must be a finite positive integer')
  end
  if (nboot > realmax('single'))
    error ('nboot exceeds the maximum number of resamples')
  end
  if (nargin < 3)
    u = 0;
  else
    if ~islogical (u)
      error ('u must be either a false (for bootstrap) or true (for bootknife)')
    end
  end
  
  % Preallocate bootsam
  bootsam = zeros (n, nboot, 'int16');
  
  % Initialize weight vector defining the available row counts remaining
  if (nargin > 3)
    % Assign user defined weights (counts)
    % Error checking
    if (numel(c) ~= n)
      error("weights must be a vector of length n");
    end
    if (sum(c) ~= n * nboot)
      error("weights must add up to n * nboot")
    end
  else
    % Assign weights (counts) for uniform sampling
    c = ones (n, 1, 'single') * nboot; 
  end
  
  % Perform balanced sampling
  r = 0;
  for b = 1:nboot
    R = rand (n, 1);
    if (u)
      % Choose which row of the data to exclude for this bootknife sample
      if (fix ((b - 1) / n) == fix (nboot / n))
        r = 1 + fix (rand (1) * n);     % random
      else
        r = b - fix ((b - 1) / n) * n;  % systematic
      end
    end
    for i = 1:n
      d = c;  
      if (u)
        d(r) = 0;
      end
      if ~sum (d)
        d = c;
      end
      d = cumsum (d);
      j = sum (R(i) >= d ./ d(end)) + 1;
      bootsam (i, b) = j;
      c(j) = c(j) - 1; 
    end
  end